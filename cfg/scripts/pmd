#!/usr/bin/env bash

set -e

DOSBOX=dosbox
NKF=nkf
PMDPLAY=pmdplay
MPV=mpv
FSWATCH=fswatch
PMDNAME=$(basename $0)

declare -a COMMANDS_LIST=(
  compile shell play watch
)
declare -A COMMANDS_MAP
for key in ${!COMMANDS_LIST[@]}; do
  COMMANDS_MAP[${COMMANDS_LIST[${key}]}]=${key}
done

usage() {
  echo "${PMDNAME}: [${COMMANDS_LIST[*]}] ..." >&2
}

if [ $# -lt 1 ]; then
  usage
  exit 1
elif [ -z "${COMMANDS_MAP[$1]}" ]; then
  usage
  echo "Unknown command: $1" >&2
  exit 1
fi

PMDCMD="$1"
shift 1

dosbox_init() {
  if [ -n "${PROJMD_DBINIT}" ]; then
    echo "Error: Calling dosbox_init with PROJMD_DBINIT still defined!" >&2
    exit 1
  fi
  export PROJMD_DBINIT=$(mktemp dosbox_init.conf.XXXXXXXX)
  sed "s^@PROJMD_BASE@^${PROJMD_BASE}^g" "${PROJMD_BASE}/cfg/dosbox_init.conf" > "${PROJMD_DBINIT}"
}
dosbox_deinit() {
  if [ -z "${PROJMD_DBINIT}" ]; then
    echo "Error: Calling dosbox_deinit with PROJMD_DEINIT undefined!" >&2
    exit 1
  fi
  rm -f "${PROJMD_DBINIT}"
  unset PROJMD_DBINIT
}

### Definition commands & their usage

## compile
usage_compile() {
  echo "${PMDNAME} compile: MODULE.MML [MODULE2.MML...]" >&2
}

do_compile() {
  if [ $# -lt 1 ]; then
    usage_compile
    exit 1
  fi

  dosbox_init

  for mmlfile do
    PROJMD_MMLFILE_FULLPATH="$(realpath "${mmlfile}")"
    # TODO realpath workspace path, see macOS problem interactively worked around earlier
    PROJMD_MMLFILE_WORKSPACE="${PROJMD_MMLFILE_FULLPATH##${PROJMD_BASE}/workspace/}"
    if [ "${PROJMD_MMLFILE_WORKSPACE}" == "${PROJMD_MMLFILE_FULLPATH}" ]; then
      echo "File '${PROJMD_MMLFILE_FULLPATH}' is not relative to workspace '${PROJMD_BASE}/workspace', skipping..." >&2
      continue
    fi

    PROJMD_DBCMD=$(mktemp dosbox_cmd.conf.XXXXXXXX)
    sed "s^@PROJMD_MMLFILE_WORKSPACE@^${PROJMD_MMLFILE_WORKSPACE}^g" "${PROJMD_BASE}/cfg/dosbox_cmd.conf" > "${PROJMD_DBCMD}"

    env SDL_AUDIODRIVER=dummy "${DOSBOX}" -conf "${PROJMD_DBINIT}" -conf "${PROJMD_DBCMD}" -conf "${PROJMD_BASE}/cfg/dosbox_deinit.conf" >&2

    cat "${PROJMD_BASE}/PMD/MC.LOG" | "${NKF}" -S
    rm -f "${PROJMD_BASE}/PMD/MC.LOG"
    rm -f "${PROJMD_DBCMD}"
    unset PROJMD_DBCMD
  done

  dosbox_deinit
}

## shell
do_shell() {
  dosbox_init

  unset SDL_VIDEODRIVER
  "${DOSBOX}" -userconf -conf "${PROJMD_DBINIT}"

  dosbox_deinit
}

## play
usage_play() {
  echo "${PMDNAME} play: MODULE.M" >&2
}

do_play() {
  if [ $# -ne 1 ]; then
    usage_play
    exit 1
  fi

  PROJMD_MFILE_FULLPATH="$(realpath "$1")"

  # "${PMDPLAY}" "${PROJMD_MFILE_FULLPATH}" -- -- 0
  # pmdplay on newer SDL2 versions cannot be stopped, and it might be killing my pulseaudio setup while streaming
  env HOME="${PROJMD_BASE}/pmdmini" SDL_AUDIODRIVER=dummy "${PMDPLAY}" "${PROJMD_MFILE_FULLPATH}" "${PROJMD_MFILE_FULLPATH}.WAV"
  declare -a MPV_FLAGS=(
    --force-window=no
    --term-playing-msg='=> Press L to toggle looping, q to quit <='
    --term-status-msg='${filename/no-ext}: ${playback-time} / ${duration}'
    --term-osd-bar --term-osd-bar-chars='[-|-]'
    --msg-level=cplayer=warn
  )
  echo
  "${MPV}" "${PROJMD_MFILE_FULLPATH}.WAV" "${MPV_FLAGS[@]}"
  echo
}

## watch
usage_watch() {
  echo "${PMDNAME} watch: MODULE.MML" >&2
}

do_watch() {
  PROJMD_WATCH_LIST=""

  if [ $# -ne 1 ]; then
    usage_watch
    exit 1
  fi

  PROJMD_MMLFILE_FULLPATH="$(realpath "$1")"
  # TODO realpath workspace path, see macOS problem interactively worked around earlier
  PROJMD_MMLFILE_WORKSPACE="${PROJMD_MMLFILE_FULLPATH##${PROJMD_BASE}/workspace/}"
  if [ "${PROJMD_MMLFILE_WORKSPACE}" == "${PROJMD_MMLFILE_FULLPATH}" ]; then
    echo "File '${PROJMD_MMLFILE_FULLPATH}' is not relative to workspace '${PROJMD_BASE}/workspace', can't watch!" >&2
    exit 1
  fi

  PROJMD_MMLFILE_EXT=".$(echo "$1" | rev | cut -d'.' -f1 | rev)"
  PROJMD_MFILE_BASENAME="$(basename "$1" "${PROJMD_MMLFILE_EXT}" | tr '[a-z]' '[A-Z]')"

  echo "Watching ${PROJMD_MMLFILE_FULLPATH}..."
  PROJMD_WATCH_COMPILELOG="$(mktemp)"
  while true; do
    set +e
    do_compile "${PROJMD_MMLFILE_FULLPATH}" | tee "${PROJMD_WATCH_COMPILELOG}"
    PROJMD_WATCH_PLAYINGID=""
    if ! grep 'Error' "${PROJMD_WATCH_COMPILELOG}" >/dev/null; then
      PROJMD_WATCH_COMPILEDFILE="$(dirname "${PROJMD_MMLFILE_FULLPATH}")"
      PROJMD_WATCH_COMPILEDFILE="${PROJMD_WATCH_COMPILEDFILE}/${PROJMD_MFILE_BASENAME}"
      PROJMD_WATCH_COMPILEDFILEEXT=".M"
      if grep -i '#Filename' "${PROJMD_MMLFILE_FULLPATH}" >/dev/null; then
        PROJMD_WATCH_COMPILEDFILEEXT="$(grep -i '#Filename' "${PROJMD_MMLFILE_FULLPATH}" | rev | cut -d' ' -f1 | rev | tr -d '\r')"
      fi
      PROJMD_WATCH_COMPILEDFILE="${PROJMD_WATCH_COMPILEDFILE}${PROJMD_WATCH_COMPILEDFILEEXT}"
      echo pmd play "${PROJMD_WATCH_COMPILEDFILE}"
      do_play "${PROJMD_WATCH_COMPILEDFILE}" &
      PROJMD_WATCH_PLAYINGID="$!"
    fi
    PROJMD_WATCH_EVENT="$("${FSWATCH}" --one-event --event Updated ${PROJMD_MMLFILE_FULLPATH})"
    if [ "x${PROJMD_WATCH_PLAYINGID}" != "x" ]; then
      kill $(ps -o pid= --ppid "${PROJMD_WATCH_PLAYINGID}") 2>/dev/null
      kill "${PROJMD_WATCH_PLAYINGID}" 2>/dev/null
    fi
    set -e
    if [ "x${PROJMD_WATCH_EVENT}" == "x" ]; then
      break
    fi
  done
  rm -f "${PROJMD_WATCH_COMPILELOG}"
  echo "Done watching ${PROJMD_MMLFILE_FULLPATH}."
}


### End definitions

do_${PMDCMD} "$@"

set +e
